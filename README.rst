============================================
Human-readable pseudo-hash based on coolname
============================================

|pypi| |build| |coverage|

For any int/str/bytes, return deterministic human-readable string generated by `coolname <https://pypi.org/project/coolname/>`_.

.. code-block:: python

    >>> from coolname_hash import pseudohash_slug_v1 as pseudohash_slug
    >>> pseudohash_slug(123)
    'hissing-sage-buzzard-of-faith'
    >>> pseudohash_slug('qwerty')
    'jumping-kickass-bumblebee-of-chaos'
    >>> pseudohash_slug('\x00\x01\xFF')
    'smooth-offbeat-hummingbird-from-avalon'

Or you can get tuples:

    >>> from coolname_hash import pseudohash_tuple_v1 as pseudohash_tuple
    >>> pseudohash_tuple('foobar')
    ['huge', 'beneficial', 'chihuahua', 'of', 'refinement']

**WARNING:** Random sequence varies from version to version, so make sure you pin version exactly in your project's requirements file.
Don't just use ``coolname_hash``, use ``coolname_hash==1.1.1``.

Caveats for variable types:

- Same integer represented as int/str/bytes (e.g. ``123``, ``'123'`` and ``b'123'``) will yield the same result.

- Same text as ``bytes`` and ``str`` will yield the same result when encoded in UTF-8.

- Float/Decimal values are not allowed (because there's no practical reason).

- ``None`` is not allowed, you should handle it explicitly in your code.


.. |pypi| image:: https://img.shields.io/pypi/v/coolname_hash.svg
    :target: https://pypi.python.org/pypi/coolname_hash
    :alt: pypi

.. |build| image:: https://api.travis-ci.org/alexanderlukanin13/coolname_hash.svg?branch=master
    :target: https://travis-ci.org/alexanderlukanin13/coolname_hash?branch=master
    :alt: build status

.. |coverage| image:: https://coveralls.io/repos/alexanderlukanin13/coolname_hash/badge.svg?branch=master&service=github
    :target: https://coveralls.io/github/alexanderlukanin13/coolname_hash?branch=master
    :alt: coverage
